
from random import choice
from time import sleep
import replit


def makeBoard(w,h):	#makes a board of set width an height
	board = []
	row = []
	weight = [0,0,0,0,0,1,1,1] #probability of a cell
	for row in range(h):
		row = []
		for col in range(w):
			row.append(choice(weight))
		board.append(row)
	return board

def play_test():
	return [[0,0,0,0,0],[0,0,0,0,0],[0,1,1,1,0],[0,0,0,0,0],[0,0,0,0,0]]

def display(board):
	niceRow = ""
	for row in board:
		for col in row:
			if col == 1:
				niceRow += "X"
			elif col == 0:
				niceRow += "."
		print(niceRow)
		niceRow = ""

def tick(board):
	board2 = []
	row2 = []
	for r in range(len(board)):
		for c in range(len(board)):
			row2.append(scan(board,r,c))
		board2.append(row2)
		row2 = []
	return board2

def scan(board,r,c):
	neighbours = 0
	if r != 0 and board[r-1][c] == 1:
		neighbours += 1
	if r != 0 and c != 0 and board[r-1][c-1] == 1:
		neighbours += 1
	if r != 0 and c != (len(board[0])-1) and board[r-1][c+1] == 1:
		neighbours += 1
	if c != 0 and board[r][c-1] == 1:
		neighbours += 1
	if c != (len(board[0])-1) and board[r][c+1] == 1:
		neighbours += 1
	if r != (len(board)-1) and board[r+1][c] == 1:
		neighbours += 1
	if r != (len(board)-1) and c != 0 and board[r+1][c-1] == 1:
		neighbours += 1
	if r != (len(board)-1) and c != (len(board[0])-1) and board[r+1][c+1] == 1:
		neighbours += 1
	
	
	if board[r][c] == 1 and 2 <= neighbours <= 3 :
		return 1
	elif board[r][c] == 0 and neighbours == 3:
		return 1
	elif board[r][c] == 1:
		return 0
	else:
		return 0
	
def play(board, r):
	for x in range(r*4):
		print('\n')
		display(board)
		board = tick(board)
		print('-'*5,'Gen %i'%(x+1),'-'*5)
		sleep(.75)
		replit.clear()
		

def start_me():
	#print("Conway's Game of Life","1) Any live cell with two or three neighbors survives.","2) Any dead cell with three live neighbors becomes a live cell.","3) All other live /dead cells don't change", sep="\n\t")
	play(play_test(),1)

	r = int(input("Enter the dimensions of your board\n\t"))
	board = makeBoard(r,r)
	play(board, r)
start_me()
